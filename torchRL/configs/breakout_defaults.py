from torchRL.data.pipelines.transforms import ToTensor
from yacs.config import CfgNode as CN

_C = CN()
_C.USE_GPU = False

_C.NET = CN()
_C.NET.NAME = "SmallCNN"
_C.NET.HIDDEN_DIM = 256
_C.NET.ACTION_DIM = 4

_C.ENV = CN()
_C.ENV.NAME = "BreakoutNoFrameskip-v4"
_C.ENV.MAX_EPISODE_STEPS = 10000
_C.ENV.REWARD_SCALE = 1.0

_C.TRAIN = CN()
_C.TRAIN.TRAINER = ""
_C.TRAIN.LEARNING_RATE = 0.0003
_C.TRAIN.BATCH_SIZE = 32
_C.TRAIN.TRAIN_INTERVAL = 10
_C.TRAIN.NUM_ITERS_PER_TRAIN = 50
_C.TRAIN.DISCOUNT_RATE = 0.99
_C.TRAIN.NUM_EPISODES = 10000
_C.TRAIN.VERBOSE_INTERVAL = 10
_C.TRAIN.TARGET_SYNC_INTERVAL = 100
_C.TRAIN.AVERAGE_SIZE = 10
_C.TRAIN.AVG_REWARDS_TO_TERMINATE = 5000
_C.TRAIN.EPSILON_GREEDY_MINMAX = (0.01, 0.08)
_C.TRAIN.STOP_DECAY_EPSILON = 2000

_C.DATASET = CN()
_C.DATASET.USE_GPU = _C.USE_GPU
_C.DATASET.TYPE = "BufferImageDataset"
_C.DATASET.BUFFER_SIZE = 50000
_C.DATASET.PIPELINES = ["ToPILImage", "Grayscale", "Resize", "BottomCrop", "ToTensor", "Normalize", "ToDevice"]
_C.DATASET.PIL_MODE = ""
_C.DATASET.RESIZE = [110, 84]  # (h, w)
_C.DATASET.MEAN = [0.2,]
_C.DATASET.STD = [0.23,]

_C.LOGGER = CN()
_C.LOGGER.OUTPUT_DIR = "./output"
_C.LOGGER.LOG_NAME = ""
_C.LOGGER.LOG_FILE = False
_C.LOGGER.SAVE_MODEL = False
_C.LOGGER.SAVE_MODEL_INTERVAL = 1000

def get_cfg_defaults():
    return _C.clone()
